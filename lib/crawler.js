// Generated by CoffeeScript 1.6.3
(function() {
  var json, port, qs, re, server, service;

  server = (require('webserver')).create();

  port = 8889;

  re = /^\/crawl\?(url=.*)/;

  service = server.listen(port, function(req, res) {
    var crawlUrl, matches, method, query, url;
    url = req.url;
    method = req.method;
    matches = url.match(re);
    if (method === !'GET') {
      res.statusCode = 400;
      res.write("invalid method " + method);
    } else if ((matches == null) || (matches[1] == null)) {
      res.statusCode = 404;
      res.write("invalid url " + url);
    } else {
      query = qs.decode(matches[1]);
      crawlUrl = query.url;
      console.log("request crawl url: " + crawlUrl);
    }
    res.write("taxed");
    return res.close();
  });

  if (!service) {
    console.log("Failed to start server on 127.0.0.1:" + port);
  }

  json = function(stuff) {
    return JSON.stringify(stuff);
  };

  qs = {
    decode: function(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);

    var maxKeys = 1000;
    if (options && options.maxKeys) {
      maxKeys = options.maxKeys;
    }

    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!Object.hasOwnProperty(obj, k)) {
        obj[k] = v;
      } else if (Array.isArray(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  }
  };

}).call(this);
