// Generated by CoffeeScript 1.6.3
(function() {
  var APIServer, EventEmitter, Logger, URL, db, log, restify, store;

  EventEmitter = (require('events')).EventEmitter;

  Logger = require('bunyan');

  restify = require('restify');

  db = require('./db');

  store = db.store;

  URL = db.URL;

  log = new Logger({
    name: 'APIServer',
    streams: [
      {
        stream: process.stdout,
        level: 'debug'
      }
    ],
    serializers: {
      req: function(req) {
        return {
          method: req.method,
          path: req.path,
          query: req.query
        };
      }
    }
  });

  APIServer = (function() {
    function APIServer(options) {
      this.options = options;
      this.server = restify.createServer({
        name: 'loki-api',
        version: '1.0.0',
        log: log
      });
      this.server.pre(function(req, res, next) {
        req.headers.accept = 'application/json';
        req.log.info({
          req: req
        }, 'incoming request');
        return next();
      });
      this.server.use(restify.acceptParser(this.server.acceptable));
      this.server.use(restify.queryParser());
      this.server.use(restify.bodyParser());
      this.server.use(restify.requestLogger());
      this.server.get('/snapshots', function(req, res, next) {
        var url;
        url = req.query.url;
        if (!url) {
          return next(new restify.MissingParameterError('missing url param'));
        }
        return URL.findByURL(url, function(err, url) {
          if (err) {
            return next();
          }
        });
      });
      this.server.post('/snapshots', function(req, res, next) {
        var only, ttl, url;
        url = req.body.url;
        ttl = req.body.ttl || 300;
        return only = req.body.only;
      });
      this.store = store;
    }

    APIServer.prototype.start = function(port) {
      var _this = this;
      port = port || 8080;
      return this.server.listen(port, '127.0.0.1', function(err) {
        if (err) {
          return console.log(err);
        } else {
          return console.log("" + _this.server.name + " " + _this.server.url + " listening on port " + port);
        }
      });
    };

    APIServer.prototype.stop = function() {};

    return APIServer;

  })();

  exports.createServer = function(options) {
    return new APIServer(options);
  };

}).call(this);
